/**
 * \class THSProj_Pi0N
 * 
 * Template final class .
 * 
 * Users should create their own analysis specific project classes.
 * 
 */



#include "TDatabasePDG.h"
#include "THSProj_Pi0N.h"
#include <algorithm>


THSProj_Pi0N::THSProj_Pi0N(){
  //SetUseChargePID();//If want to only use charge for IDing
  //include topology for analysis and get index
  fTID_0=AddTopology("proton:gamma:gamma");
  fTID_1=AddTopology("gamma:gamma:gamma");
 
  //Set final state
  fFinal.push_back(&fPhoton);
  fFinal.push_back(&fProton);
  //fFinal.push_back(&fNeutron);
  //fFinal.push_back(&fPion);
  fFinal.push_back(&fGamma1);
  fFinal.push_back(&fGamma2);

  //Initialise particle iters
  fDetIter.resize(fNTopo);
  Init_Iter0();
  Init_Iter1();
}


void THSProj_Pi0N::Init_Generated(){
  return;
  if(!THSFinalState::frGenParts) return;
  if(THSFinalState::frGenParts->size()!=4) {fGoodEvent=kFALSE;return;}
  //Fill our data member particles
  //User is responsible for indicing right
  //comes from order in generated file (e.g LUND)
  if(THSFinalState::fIsGenerated){
    //fElectron=*frGenParts->at(0);

    //two ball photons, spectator and participant, will only be parti. proton for one file, photon is tag
    /*    fGamma1=*frGenParts->at(0);
	  fGamma2=*frGenParts->at(1);
	  fSpec=*frGenParts->at(2);
	  fPart=*frGenParts->at(3);
	  fPhoton=*frGenParts->at(4);

	  fInitialN=fSpec.P4() - fTarget;
	  fPion.Add(&fGamma1,&fGamma2,111);
	  fNucleon= &fPart;

	  fBeamEnergy = (&fPhoton)->P4().E();
	  fTagTime = (&fPhoton)->Time();
	  fGammaOneTime=(&fGamma1)->Time();
	  fGammaTwoTime=(&fGamma2)->Time();
	  fGammaDiffTime=fGammaOneTime-fGammaTwoTime;
	  fNucleonTime=(&fPart)->Time();
	  fNucleonTagDiffTime = fNucleonTime - fTagTime;
	  fGammaOneTagDiffTime= fGammaOneTime - fTagTime;*/





  }
  else{//Just assign truth values
    //fElectron.SetTruth(frGenParts->at(0));
    /*   fGammaOne.SetTruth(frGenParts->at(0));
	 fGammaTwo.SetTruth(frGenParts->at(1));
	 fSpec.SetTruth(frGenParts->at(2));
	 fProton.SetTruth(frGenParts->at(3));
	 fPhoton.SetTruth(frGenParts->at(4));*/




  }
}

//Define topology Iterator functions
void THSProj_Pi0N::Init_Iter0(){
  //THSParticle iterator initialisation
  THSParticleIter* diter=CreateParticleIter(fTID_0,&fVecBeams,1);
  AddSelectToSelected(diter,1,1,&fPhoton);
  diter=CreateParticleIter(fTID_0,&fVecGams,2);
  AddSelectToSelected(diter,1,2,&fGamma1,&fGamma2);
  diter=CreateParticleIter(fTID_0,&fVecProtons,1);
  AddSelectToSelected(diter,1,1,&fProton);

  //If create iterator must configure it
  fDetIter[fTID_0]->ConfigureIters();
}
void THSProj_Pi0N::Init_Iter1(){
  //THSParticle iterator initialisation
  THSParticleIter* diter=CreateParticleIter(fTID_1,&fVecBeams,1);
  AddSelectToSelected(diter,1,1,&fPhoton);
  diter=CreateParticleIter(fTID_1,&fVecGams,3);
  AddSelectToSelected(diter,1,2,&fGamma1,&fGamma2);
  AddSelectToRemainder(diter,1,1,&fNeutron);

  //If create iterator must configure it
  fDetIter[fTID_1]->ConfigureIters();
}
// void THSProj_Pi0N::Init_IterX(){
//  THSParticleIter* diter=CreateParticleIter(fTID_X,&fVecY,NPARTICLES);
//  ...
//  fDetIter[fTID_0]->ConfigureIters();
// }
//Or if iterator the same as a previous one
// void THSProj_Pi0N::Init_IterY(){
//   fDetIter[fTID_1]=fDetIter[fTID_0];
// }
//Define topology functions
void THSProj_Pi0N::Topo_0(){
  fTopologies=1; //Proton Channel

  //fPhoton is Tagged photon, fProton is proton and fGamma1,2 is the two photons of pi0.

  //Reconstruct missing or combined particles
  fPion.Add(&fGamma1,&fGamma2,111); //pdgcode is 111, pi+ is 211, pi-????? This sets p4, pdg, time measmass(i.e. deposited energy) and the mass to the pdg mass(.M() is now pdg mass) Also sets the vertex based on some closest approach function  and if truth available  will do the same for truth.

  if(fProton.P4p()->Phi()==0 && fProton.P4p()->Theta()==0){
    fDetErrs= -1;
  }
  else{
    fDetErrs=0;
  }
  fBeamEnergy = fPhoton.P4p()->E();

  cout << fPhoton.P4().M() <<"   "<<  fTarget.M() << "   " << fProton.P4().E()<<"   " <<fPion.MeasMass() <<endl;

  // TimingfIsGenerated)
  fTagTime=fPhoton.Time();
  fGammaOneTime=fGamma1.Time();
  fGammaTwoTime=fGamma2.Time();
  fGammaDiffTime=fGammaOneTime-fGammaTwoTime;
  fNucleonTime=fProton.Time();
  fNucleonTagDiffTime = fNucleonTime - fTagTime;
  fGammaOneTagDiffTime= fGammaOneTime - fTagTime;



  fPionLabEnergy = fPion.P4p()->E();
  fNucleonLabEnergyb4 = fProton.P4p()->E();
  fCorrectedProtonLabEnergyb4 = ProtonELossCorrection(fProton.P4p()->Theta(), fProton.P4p()->E());

  //Dominik's function
  fNucleonLabEnergy = CalcQFThreeBodyRecoilPartT(fPhoton.P4().E(), fPion.P4(), fProton.P4(), massTarget, massProton,massNeutron);

 
  if(std::isnan(fNucleonLabEnergy) ){
    fEnergyErrs =  -1;
    fProton.P4p()->SetE(fProton.P4p()->E()+fProton.PDGMass()*1000);  //Not sure if 1000 needed see if still in GeV.
  }
  else{
    fEnergyErrs = 0;
    fProton.P4p()->SetE(fNucleonLabEnergy + fProton.PDGMass()*1000 ); //issue with phi due to this.
  }


  if (fDetErrs==0)fProton.TakePDGMassFromE(); 

  fNucleonLabEnergyAft = fProton.P4p()->E();
  // fPi0.SetMeasMass(fPi0.P4().M()); //Is this required anymore? I don't think so.

  //Reconstruct missing or combined particles
  //fspectator = fPhoton.P4() +  fTarget - fProton.P4() -fPion.P4();
  fM2gamma=fPion.MassDiff(); //Need to convert to MeV the pdg mass
  fMissP4=fPhoton.P4() + fTarget - fPion.P4();
  fMissMass= fMissP4.M() ;
  fInvMass=fPion.MeasMass();
// cout << fPhoton.P4().M() <<"   "<<  fTarget.M() << "   " << fProton.P4().M()<<"   " <<fPion.MeasMass() <<endl;
  fspecMass=fPhoton.MeasMass() + fTarget.M() -  fProton.P4().M() -fPion.MeasMass();  //fspectator.M();
  fcoplanarity = ( fPion.P4().TLorentzVector::DeltaPhi(  -((&fProton)->P4()) )  )*TMath::RadToDeg();
  fInitialN = fTarget- fspectator;
  // fBeamEnergy = fBeam.E();



  //Tests of angular distribution
  fOpeningAngle3=( ( -(fPion.P4() + (&fPhoton)->P4()) ).TLorentzVector::Angle( (&fProton)->P4().Vect()) )*TMath::RadToDeg() ;
  fOpeningPhi=( ( -(fPion.P4()) ).TLorentzVector::DeltaPhi( (&fProton)->P4())  )*TMath::RadToDeg() ;
  fnucleonPhi=(&fProton)->P4().Phi() ; 
  fnucleonTheta=(&fProton)->P4().Theta();
  fpi0Phi=fPion.P4().Phi();
  fpi0Theta=fPion.P4().Theta();

  //Polarisation
  fTaggChannel = (&fPhoton)->Detector();
  fPolState=(&fPhoton)->EdgePlane();
  fPolVec=(&fPhoton)->Vertex();
  if (fPolState==1) fPol=fPolVec.X();
  if (fPolState==-1) fPol=fPolVec.Y();

  //Detectors used for each particle
  fDetector = (&fProton)->Detector();

  //Set up a generic nucleon variable to be used in kinematics
  fNucleon = &fProton;



}
void THSProj_Pi0N::Topo_1(){
  //Reconstruct missing or combined particles
  fTopologies=-1; //Neutron Channel
  fPion.Add(&fGamma1,&fGamma2,111);
  fBeamEnergy = (&fPhoton)->P4().E();


  fDetErrs=0;

  // Timing
  fTagTime=(&fPhoton)->Time();
  fGammaOneTime=(&fGamma1)->Time();
  fGammaTwoTime=(&fGamma2)->Time();
  fGammaDiffTime=fGammaOneTime-fGammaTwoTime;
  fNucleonTime=(&fNeutron)->Time();
  fNucleonTagDiffTime = fNucleonTime - fTagTime;
  fGammaOneTagDiffTime= fGammaOneTime - fTagTime;



  fPionLabEnergy = fPion.P4().E();
  fNucleonLabEnergyb4 = (&fNeutron)->P4().E();


  //Dominik's function
  fNucleonLabEnergy = CalcQFThreeBodyRecoilPartT((&fPhoton)->P4().E(), fPion.P4(), (&fNeutron)->P4(), massTarget, massNeutron,massProton);

  if(std::isnan(fNucleonLabEnergy) ){
    fEnergyErrs = -1;
    (&fNeutron)->P4p()->SetE((&fNeutron)->P4p()->E()+(&fNeutron)->PDGMass()*1000);  
  }
  else{
    fEnergyErrs =0;
    (&fNeutron)->P4p()->SetE(fNucleonLabEnergy + (&fNeutron)->PDGMass()*1000 ); //issue with phi due to this.
  }

  // (&fNeutron)->TakePDGMassFromE(); //Tvector3 vector can't be stretched error here on this line. sqrt(E^2 - M^2) so E=M or E<M? Removed for testing purposes for a minute.

  fNucleonLabEnergyAft = (&fNeutron)->P4().E();
  // fPi0.SetMeasMass(fPi0.P4().M()); //Is this required anymore? I don't think so.



  //Reconstruct missing or combined particles
  fspectator = (&fPhoton)->P4() +  fTarget - (&fNeutron)->P4() -fPion.P4();
  fM2gamma=fPion.MassDiff();
  fMissP4=(&fPhoton)->P4() + fTarget - fPion.P4();
  fMissMass=fMissP4.M();
  fInvMass=fPion.MeasMass();
  fspecMass=fspectator.M();
  fcoplanarity = ( fPion.P4().TLorentzVector::DeltaPhi(-((&fNeutron)->P4()))  )*TMath::RadToDeg();
  fInitialN = fTarget-fspectator;

  //Tests of angular distribution
  fOpeningAngle3 = (  ( -( fPion.P4()+(&fPhoton)->P4()  )  ).TLorentzVector::Angle( (&fNeutron)->P4().Vect()) )*TMath::RadToDeg() ;
  fOpeningPhi = (   (-( fPion.P4())).TLorentzVector::DeltaPhi( (&fNeutron)->P4()) )*TMath::RadToDeg() ;
  fnucleonPhi=(&fNeutron)->P4().Phi();
  fnucleonTheta=(&fNeutron)->P4().Theta();
  fpi0Phi=fPion.P4().Phi();
  fpi0Theta=fPion.P4().Theta();

  //Polarisation
  fTaggChannel = (&fPhoton)->Detector();
  fPolState=(&fPhoton)->EdgePlane();
  fPolVec=(&fPhoton)->Vertex();
  if (fPolState==1) fPol=fPolVec.X();
  if (fPolState==-1) fPol=fPolVec.Y();
 
  //Detectors used for each particle
  fDetector = (&fNeutron)->Detector();


  //Set up a generic nucleon variable to be used in kinematics
  fNucleon = &fNeutron;


}
// void THSProj_Pi0N::Topo_X(){
// }

void THSProj_Pi0N::Kinematics(){
  if(!THSFinalState::fGoodEvent) return;//don't do calculations
  //Do calculations if Good Event

  //  fKine.SetGammaTarget((&fPhoton)->P4(),fInitialN);
  fKine.SetGammaTarget(fPhoton.P4(),fInitialN);
  fKine.SetMesonBaryon(fPion.P4(),fNucleon->P4());
  fKine.PhotoCMDecay();
  fCMPhi=(fKine.Phi())*TMath::RadToDeg() ;
  fCosth=fKine.CosTheta(); 
  fW = fKine.W();
  //fCMPhi=(fpi0.P4().Phi())*TMath::RadToDeg();
  //Nucleon is not in CM frame, only the meson phi and theta are returned. Add this functionality to THSKinematics?
  //  fCMNucPhi=(fKine.BarPhi())*TMath::RadToDeg();
  //  fCMNucCosTh=fKine.BarCosTheta();
  //  fOpeningAngle =( TMath::ACos(fCosth) +   TMath::ACos(fCMNucCosTh)     ) ;
  fOpeningAngle2 =( TMath::ACos(fCosth) -    (fNucleon->P4().Theta() )  ) ;
  
  // fPionvec = fKine.Meson2() ;
  // fNuclvec = fKine.Baryon2();
  // fOpeningAngle4 = (  (  -( fPionvec) ).TLorentzVector::Angle( fNuclvec.Vect()) )*TMath::RadToDeg() ;
  //  fOpeningAngle4 =fKine.OpenAngle();




  //Neutron Channel Kinematics

  //fKine.SetMesonBaryon(fPion.P4(),(&fNeutron)->P4());
  //fKine.PhotoCMDecay();
  //fCMPhiTopoNeut=(fKine.Phi())*TMath::RadToDeg() ;
  //fCosthTopoNeut=fKine.CosTheta(); 
  //fWTopoNeut = fKine.W();

  //  fOpeningAngle2TopoNeut =( TMath::ACos(fCosthTopoNeut) -    ((&fNeutron)->P4().Theta() )  ) ;
  




}

void THSProj_Pi0N::FinalStateOutTree(TTree* tree){
  THSFinalState::fFinalTree=tree;
  //tree->Branch("Final",&fFinal);
  tree->Branch("MissMass",&fMissMass,"MissMass/D"); //Missing Mass of Participant
  tree->Branch("M2gamma",&fM2gamma,"M2gamma/D");  
  tree->Branch("Phi",&fCMPhi,"Phi/D");   //COM Phi angle of meson
  tree->Branch("Costh",&fCosth,"Costh/D");  //COM costheta angle of meson 
  tree->Branch("Topo",&fTopologies,"Topo/D");//Two topologies proton particapant and neutron part,pi0 
  tree->Branch("InvMass",&fInvMass,"InvMass/D"); //Inv mass of meson
  tree->Branch("SpecMass",&fspecMass,"SpecMass/D"); //Spectator mass
  tree->Branch("Coplanarity",&fcoplanarity,"Coplanarity/D"); //Coplanarity between pi0 and part. nucl.
  tree->Branch("W",&fW,"W/D"); 
  // tree->Branch("fUID",&fUID,"fUID/D"); //Unique identifier
  tree->Branch("Detector",&fDetector,"Detector/D"); //Detector hit by participant, NaI etc. see Goat for code conv. 


  //  tree->Branch("PhiTopoNeut",&fCMPhiTopoNeut,"PhiTopoNeut/D");   //COM Phi angle of meson for Neutron Topology
  //  tree->Branch("CosthTopoNeut",&fCosthTopoNeut,"CosthTopoNeut/D");  //COM costheta angle of meson  for Neutron topology
  //  tree->Branch("WTopoNeut",&fWTopoNeut,"W/D"); //For Neutron Topology 
  //  tree->Branch("OpeningAngle2TopoNeut",&fOpeningAngle2TopoNeut,"OpeningAngle2TopoNeut/D"); //For Neutron topology

  //  tree->Branch("PhiTopoProt",&fCMPhiTopoProt,"PhiTopoProt/D");   //COM Phi angle of meson for PROTON Topology
  //  tree->Branch("CosthTopoProt",&fCosthTopoProt,"CosthTopoProt/D");  //COM costheta angle of meson  for PROTON topology
  //  tree->Branch("WTopoProt",&fWTopoProt,"WTopoProt/D"); //For PROTON Topology 
  //  tree->Branch("OpeningAngle2TopoProt",&fOpeningAngle2TopoProt,"OpeningAngle2TopoProt/D"); //For Proton Topology


  tree->Branch("BeamEnergy",&fBeamEnergy,"BeamEnergy/D"); 
  tree->Branch("TagTime",&fTagTime,"TagTime/D"); //Tagger Time //Test Case

  tree->Branch("PolState",&fPolState,"PolState/I"); //PolState +-1 or 0 ,Perp Para moeller
  tree->Branch("Pol",&fPol,"Pol/D"); //Polarisation mag. also has state encompassed
  tree->Branch("TaggChannel",&fTaggChannel,"TaggChannel/D"); //Tagger Channels
  
  tree->Branch("NucleonLabEnergy",&fNucleonLabEnergy,"NucleonLabEnergy/D"); //E from Dom's func.
  tree->Branch("NucleonLabEnergyb4",&fNucleonLabEnergyb4,"NucleonLabEnergyb4/D"); //E from before Dom's func.
  tree->Branch("NucleonLabEnergyAft",&fNucleonLabEnergyAft,"NucleonLabEnergyAft/D"); //E from after Dom's func.
  tree->Branch("CorrectedProtonLabEnergyb4",&fCorrectedProtonLabEnergyb4,"CorrectedProtonLabEnergyb4/D");
  tree->Branch("PionLabEnergy",&fPionLabEnergy,"PionLabEnergy/D"); //E from Dom's func.
  // tree->Branch("OpeningAngle",&fOpeningAngle,"OpeningAngle/D"); //Angle btween det part and recon part
  tree->Branch("OpeningPhi",&fOpeningPhi,"OpeningPhi/D");  
  tree->Branch("NucleonPhi",&fnucleonPhi,"NucleonPhi/D");
  tree->Branch("NucleonTheta",&fnucleonTheta,"NucleonTheta/D");
  tree->Branch("Pi0Phi",&fpi0Phi,"Pi0Phi/D");
  tree->Branch("Pi0Theta",&fpi0Theta,"Pi0Theta/D");
  tree->Branch("OpeningAngle2",&fOpeningAngle2,"OpeningAngle2/D");
  tree->Branch("OpeningAngle3",&fOpeningAngle3,"OpeningAngle3/D");
  // tree->Branch("OpeningAngle4",&fOpeningAngle4,"OpeningAngle4/D");
  
  //  tree->Branch("CMNucPhi",&fCMNucPhi,"CMNucPhi/D");  //COM part. phi
  //  tree->Branch("CMNucCosTh",&fCMNucCosTh,"CMNucCosTh/D"); //COM participant cosTheta
  tree->Branch("EnergyErrs",&fEnergyErrs,"EnergyErrs/D");  // Error indicator for Dom's func.
  tree->Branch("DetErrs",&fDetErrs,"DetErrs/D"); // Error indicator for NO CB or TAPS hit

  tree->Branch("GammaOneTime",&fGammaOneTime,"GammaOneTime/D"); 
  tree->Branch("GammaTwoTime",&fGammaTwoTime,"GammaTwoTime/D"); 
  tree->Branch("GammaDiffTime",&fGammaDiffTime,"GammaDiffTime/D"); 
  tree->Branch("NucleonTime",&fNucleonTime,"NucleonTime/D"); 
  tree->Branch("NucleonTagDiffTime",&fNucleonTagDiffTime,"NucleonTagDiffTime/D"); 
  tree->Branch("GammaOneTagDiffTime",&fGammaOneTagDiffTime,"GammaOneTagDiffTime/D"); 

 


}
Bool_t THSProj_Pi0N::WorkOnEvent(){
  //Should this event be saved?
  THSFinalState::fGoodEvent=kTRUE;
  THSFinalState:: fCorrect=0; //Correct permutation? used for simulation only
   //If generated MC events
  if(THSFinalState::fIsGenerated) Init_Generated();
  else{//Look for reconstructed events
    //if reconstructed Find the detected particles in this event
    //    if(FindInclusiveTopology()==-1) {fGoodEvent=kFALSE;return fIsPermutating0=kFALSE;}
    //if(FindTopology()==-1) {fGoodEvent=kFALSE;return fIsPermutating0=kFALSE;}
    if(FindInclusiveTopology(-22)==-1){fGoodEvent=kFALSE;return fIsPermutating0=kFALSE;} //This line still needed?

    //Do they correspond to a defined topology?
    else if(fCurrTopo==fTID_0) Topo_0();
    else if(fCurrTopo==fTID_1) Topo_1();
    // else if(fCurrTopo==fTID_) Topo_();
    else fGoodEvent=kFALSE;
    //Get truth values
    Init_Generated();
  }

  //Calc kinematics
  Kinematics();
  
  //Check if assigned vectors agree with true generated
  //Simulation only
  THSFinalState::CheckTruth();
  
  //Can do some checks if event is worth writing or not
  //if()fGoodEvent=kTRUE;
  //else() fGoodEvent =kFALSE;
  if(fIsGenerated) return kTRUE; //Generated only 1 permutation
  return kTRUE;

  //THSFinalState::PermutateParticles();
  //if(IsPermutating()) return kTRUE;
  //else return kFALSE;
}
